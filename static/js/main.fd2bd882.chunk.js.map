{"version":3,"sources":["components/header/App__header.module.sass","components/networks/App__networks.module.sass","components/network_item/App__networkItem.module.sass","components/stations/App__stations.module.sass","components/ui/loader/App__loader.module.scss","components/header/App__header.tsx","store/actions/stationsAction.ts","store/constants/stations.ts","components/network_item/App__networkItem.tsx","store/actions/networkAction.ts","store/constants/network.ts","components/networks/App__networks.tsx","components/station_item/App__stationItem.tsx","components/stations/App__stations.tsx","components/ui/loader/App__loader.tsx","components/nav/App__nav.tsx","App.tsx","serviceWorker.ts","store/reducers/networkReducer.ts","store/reducers/stationsReducer.ts","store/reducers/index.ts","index.tsx","store/configureStore.ts","components/nav/App__nav.module.sass","components/station_item/App__stationItem.module.sass"],"names":["module","exports","connect","store","nameCheckedNetwork","network","networkName","lengthStations","station","stations","length","className","s","head","head__info","getStations","id","dispatch","type","URL","axios","get","then","response","status","data","e","company","location","onesRequest","setOnesRequest","onClick","setCheckedNetwork","network_active","city","useState","useEffect","networks","isGet","networks__wrap","map","item","i","key","favoriteStations","name","collectionId","Set","has","station__star_active","station__star","viewBox","d","style","overflow","stations__wrap","App__loader","skFlow","skFlowDot","color_1","color_2","color_3","isGetNetworks","isGetStations","nav","border","loader","App","Boolean","window","hostname","match","initialState","isError","isFetching","rootReducer","combineReducers","state","action","favoriteItems","delete","add","Array","from","compose","applyMiddleware","thunkMiddleware","createLogger","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fd2bd882.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"head\":\"App__header_head__2D-4k\",\"head__info\":\"App__header_head__info__1WYui\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"networks\":\"App__networks_networks__CRwOV\",\"networks__wrap\":\"App__networks_networks__wrap__wdDp-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"network\":\"App__networkItem_network__1G6Al\",\"network_active\":\"App__networkItem_network_active__1Dc2y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"stations\":\"App__stations_stations__1Gmeh\",\"stations__wrap\":\"App__stations_stations__wrap__3X4Gu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"skFlow\":\"App__loader_skFlow__XfVAL\",\"skFlowDot\":\"App__loader_skFlowDot__1dZV6\",\"sk-flow\":\"App__loader_sk-flow__2N1mg\",\"color_1\":\"App__loader_color_1__FKoUf\",\"color_2\":\"App__loader_color_2__2WJ9K\",\"color_3\":\"App__loader_color_3__-hMUl\"};","import React from \"react\"\nimport { connect } from \"react-redux\"\n\n//=======================================\n\nimport s from './App__header.module.sass'\n\ninterface IProps {\n    nameCheckedNetwork: string,\n    lengthStations: number\n}\n\nconst App__header = ({ nameCheckedNetwork, lengthStations }: IProps ) => {\n    return (\n        <header className={ s.head } >\n            <div className={ s.head__info } >\n                <p> { nameCheckedNetwork } - { lengthStations } </p>\n            </div>\n        </header>\n    )\n}\n\nconst mapStateToProps = ( store: any ) => {\n    return {\n        nameCheckedNetwork: store.network.networkName,\n        lengthStations: store.station.stations.length\n    }\n}\n\nexport default connect( mapStateToProps )( App__header )","import axios from 'axios'\nimport {\n    STATIONS_REQUEST,\n    STATIONS_SUCCESS,\n    STATIONS_FAIL,\n\n    STATION_SET\n} from \"../constants/stations\"\n\ninterface IProps {\n    id: string\n}\n\nexport const getStations = ({ id }: IProps ) => {\n    return function ( dispatch: any ) {\n        dispatch({ type: STATIONS_REQUEST })\n\n        const URL = `https://api.citybik.es/v2/networks/${ id }?fields=stations`\n\n        try {\n            axios.get( URL ).then( response => {\n                if ( response.status >= 200 && response.status <= 300 ) {\n                    dispatch({\n                        type: STATIONS_SUCCESS,\n                        stations: response.data.network.stations\n                    })\n                }\n            } )\n        } catch ( e ) {\n            dispatch({ type: STATIONS_FAIL })\n        }\n    }\n}\n\nexport const setFavoriteStation = ({ id }: IProps ) => ({ type: STATION_SET, id })","import {strict} from \"assert\";\n\nexport const STATIONS_REQUEST: string = 'STATIONS_REQUEST'\nexport const STATIONS_SUCCESS: string = 'STATIONS_SUCCESS'\nexport const STATIONS_FAIL: string = 'STATIONS_FAIL'\n\nexport const STATION_SET: string = 'STATION_SET'","import React from \"react\"\nimport { connect } from \"react-redux\"\nimport { getStations } from \"../../store/actions/stationsAction\"\nimport { setCheckedNetwork } from \"../../store/actions/networkAction\"\n\n//===================================================\n\nimport s from './App__networkItem.module.sass'\n\ninterface IProps {\n    dispatch: any,\n    id: string,\n    company: string,\n    onesRequest: string,\n    setOnesRequest: any,\n    location: ILocation\n}\n\ninterface ILocation {\n    latitude: number,\n    longitude: number\n    country: string\n    city: string\n}\n\nconst App__networkItem = ({ dispatch, id, company, location, onesRequest, setOnesRequest }: IProps ) => {\n    const requestStations = () => {\n        if ( onesRequest !== id ) {\n            dispatch( getStations({ id }) )\n            dispatch( setCheckedNetwork({ networkName: company }) )\n\n            setOnesRequest( id )\n        }\n    }\n\n    return (\n        <div onClick={ requestStations } id={ id } className={ onesRequest === id ? s.network_active : s.network } >\n            <p> Company - { company } </p>\n\n            <p> City - { location.city } </p>\n        </div>\n    )\n}\n\nexport default connect()( App__networkItem )","import axios from 'axios'\nimport {\n    NETWORK_SUCCESS,\n    NETWORK_FAIL,\n\n    SET_NAME_NETWORK\n} from \"../constants/network\"\n\nconst URL = `https://api.citybik.es/v2/networks?fields=id,company,location`\n\nexport const getNetworks = (): any => {\n    return function ( dispatch: any ) {\n        try {\n            axios.get( URL ).then( response => {\n                if ( response.status >= 200 && response.status <= 300 ) {\n                    dispatch({\n                        type: NETWORK_SUCCESS,\n                        networks: response.data.networks\n                    })\n                } else\n                    dispatch({ type: NETWORK_FAIL })\n            } )\n        } catch ( e ) {\n            dispatch({ type: NETWORK_FAIL })\n        }\n    }\n}\n\ninterface IProps {\n    networkName: string\n}\n\nexport const setCheckedNetwork = ({ networkName }: IProps ): any => ({ type: SET_NAME_NETWORK, networkName })","export const NETWORK_REQUEST: string = 'NETWORK_REQUEST'\nexport const NETWORK_SUCCESS: string = 'NETWORK_SUCCESS'\nexport const NETWORK_FAIL: string = 'NETWORK_FAIL'\n\nexport const SET_NAME_NETWORK: string = 'SET_NAME_NETWORK'","import React, { useEffect, useState } from 'react'\nimport { connect } from \"react-redux\"\nimport { getNetworks } from \"../../store/actions/networkAction\"\nimport { getStations } from \"../../store/actions/stationsAction\"\n\n//========================================\n\nimport s from './App__networks.module.sass'\nimport App__networkItem from \"../network_item/App__networkItem\";\n\ninterface IProps {\n    dispatch: any\n    network: IStore\n}\n\ninterface IStore {\n    networks: any[],\n    isError: boolean,\n    isFetching: boolean\n    isGet: boolean\n}\n\nconst App__networks = ({ dispatch, network }: IProps ) => {\n    const [ onesRequest, setOnesRequest ] = useState< string >( '' )\n\n    useEffect( () => {\n        dispatch( getNetworks() )\n    }, [] )\n\n    useEffect( () => {\n        if ( network.isGet ) {\n            dispatch( getStations({ id: network.networks[ 0 ].id }) )\n\n            setOnesRequest( network.networks[ 0 ].id )\n        }\n    }, [ network.isGet ] )\n\n    return (\n        <div className={ s.networks } >\n            <div className={ s.networks__wrap } >\n                {\n                    network.networks.map( ( item: any, i: number ) => (\n                        <App__networkItem\n                            onesRequest={ onesRequest }\n                            setOnesRequest={ setOnesRequest }\n                            key={ i }\n                            id={ item.id }\n                            company={ item.company }\n                            location={ item.location }\n                        />\n                    ) )\n                }\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = ( store: any ) => {\n    return {\n        network: store.network,\n    }\n}\n\nexport default connect( mapStateToProps )( App__networks )","import React from \"react\"\nimport { connect } from \"react-redux\"\nimport { setFavoriteStation } from \"../../store/actions/stationsAction\"\n\n//============================================\n\nimport s from './App__stationItem.module.sass'\n\ninterface IProps {\n    id: string,\n    name: string,\n    favoriteStations: string[],\n    dispatch: any,\n}\n\nconst App__stationItem = ({ id, name, favoriteStations, dispatch }: IProps) => {\n    const collectionId: Set< string > = new Set( favoriteStations )\n\n    const checkedFavorite = () => dispatch( setFavoriteStation({ id }) )\n\n    return (\n        <div className={ s.station } >\n            <svg onClick={ checkedFavorite } className={ collectionId.has( id ) ? s.station__star_active : s.station__star } viewBox=\"0 -10 511.98685 511\" >\n                <path d=\"m510.652344 185.902344c-3.351563-10.367188-12.546875-17.730469-23.425782-18.710938l-147.773437-13.417968-58.433594-136.769532c-4.308593-10.023437-14.121093-16.511718-25.023437-16.511718s-20.714844 6.488281-25.023438 16.535156l-58.433594 136.746094-147.796874 13.417968c-10.859376 1.003906-20.03125 8.34375-23.402344 18.710938-3.371094 10.367187-.257813 21.738281 7.957031 28.90625l111.699219 97.960937-32.9375 145.089844c-2.410156 10.667969 1.730468 21.695313 10.582031 28.09375 4.757813 3.4375 10.324219 5.1875 15.9375 5.1875 4.839844 0 9.640625-1.304687 13.949219-3.882813l127.46875-76.183593 127.421875 76.183593c9.324219 5.609376 21.078125 5.097657 29.910156-1.304687 8.855469-6.417969 12.992187-17.449219 10.582031-28.09375l-32.9375-145.089844 111.699219-97.941406c8.214844-7.1875 11.351563-18.539063 7.980469-28.925781zm0 0\"/>\n            </svg>\n\n            { name }\n        </div>\n    )\n}\n\nconst mapStateToProps = ( store: any ) => {\n    return {\n        favoriteStations: store.station.favoriteStations\n    }\n}\n\nexport default connect( mapStateToProps )( App__stationItem )","import React from \"react\"\nimport { connect } from \"react-redux\"\n\n//==================================\n\nimport s from './App__stations.module.sass'\nimport App__stationItem from \"../station_item/App__stationItem\";\n\ninterface IProps {\n    station: IStore\n}\n\ninterface IStore {\n    isGet: boolean,\n    isFetching: boolean,\n    isError: boolean,\n    stations: any[]\n}\n\nconst App__stations = ({ station }: IProps ) => {\n    return (\n        <div style={{ overflow: 'auto' }} >\n            <div className={ s.stations } >\n                <div className={ s.stations__wrap } >\n                    {\n                        station.stations.map( item => (\n                            <App__stationItem\n                                key={ item.id }\n                                id={ item.id }\n                                name={ item.name }\n                            />\n                        ) )\n                    }\n                </div>\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = ( store: any ) => {\n    return {\n        station: store.station\n    }\n}\n\nexport default connect( mapStateToProps )( App__stations )","import React from \"react\"\n\n//==============================================\n\nimport s from './App__loader.module.scss'\n\nconst App__loader = () => {\n    return (\n        <div className={ s.skFlow } >\n            <div className={ s.skFlowDot + ' ' + s.color_1 } />\n            <div className={ s.skFlowDot + ' ' + s.color_2 } />\n            <div className={ s.skFlowDot + ' ' + s.color_3 } />\n        </div>\n    )\n}\n\nexport default App__loader","import React from \"react\"\nimport { connect } from \"react-redux\"\n\n//======================================\n\nimport s from './App__nav.module.sass'\nimport App__networks from \"../networks/App__networks\"\nimport App__stations from \"../stations/App__stations\";\nimport App__loader from \"../ui/loader/App__loader\";\n\ninterface IProps {\n    isGetNetworks: boolean,\n    isGetStations: boolean\n}\n\nconst App__nav = ({ isGetNetworks, isGetStations }: IProps ) => {\n    return (\n        <nav className={ s.nav } >\n            <App__networks/>\n\n            <div className={ s.border } ></div>\n\n            <App__stations/>\n\n            {\n                !isGetStations || !isGetNetworks ? (\n                    <div className={ s.loader } >\n                        <App__loader/>\n                    </div>\n                ) : null\n            }\n        </nav>\n    )\n}\n\nconst mapStateToProps = ( store: any ) => {\n    return {\n        isGetNetworks: store.network.isGet,\n        isGetStations: store.station.isGet\n    }\n}\n\nexport default connect( mapStateToProps )( App__nav )","import React from 'react'\n\n//=========================================================\n\nimport App__header from \"./components/header/App__header\"\nimport App__nav from \"./components/nav/App__nav\"\n\nconst App = () => {\n    return (\n        <>\n            <App__header/>\n\n            <App__nav/>\n        </>\n    );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n    NETWORK_REQUEST,\n    NETWORK_SUCCESS,\n    NETWORK_FAIL,\n\n    SET_NAME_NETWORK\n} from \"../constants/network\"\n\nconst initialState = {\n    networks: [],\n    isError: false,\n    isFetching: true,\n    isGet: false,\n    networkName: ''\n}\n\ninterface ISate {\n    networks: any[],\n    isError: boolean,\n    isFetching: boolean\n    isGet: boolean\n    networkName: string\n}\n\nexport default function ( state: ISate = initialState, action: any ): object {\n    switch ( action.type ) {\n        case NETWORK_REQUEST:\n            return { networks: [], isError: false, isFetching: true, isGet: false, networkName: '' }\n\n        case NETWORK_SUCCESS:\n            return { networks: action.networks, isError: false, isFetching: false, isGet: true, networkName: action.networks[ 0 ].company }\n\n        case NETWORK_FAIL:\n            return { networks: [], isError: true, isFetching: false, isGet: false, networkName: '' }\n\n        case SET_NAME_NETWORK:\n            return { networks: state.networks, isError: false, isFetching: false, isGet: true, networkName: action.networkName }\n\n        default:\n            return state\n    }\n}\n\n","import {\n    STATIONS_REQUEST,\n    STATIONS_SUCCESS,\n    STATIONS_FAIL,\n\n    STATION_SET\n} from \"../constants/stations\"\n\ninterface ISate {\n    isGet: boolean,\n    isFetching: boolean,\n    isError: boolean,\n    stations: any[]\n    favoriteStations: string[]\n}\n\nconst initialState = {\n    isGet: false,\n    isFetching: true,\n    isError: false,\n    stations: [],\n    favoriteStations: []\n}\n\nexport default function ( state: ISate = initialState, action: any ): object {\n    switch ( action.type ) {\n        case STATIONS_REQUEST:\n            return { isGet: false, isFetching: true, isError: false, stations: [], favoriteStations: state.favoriteStations }\n\n        case STATIONS_SUCCESS:\n            return { isGet: true, isFetching: false, isError: false, stations: action.stations, favoriteStations: state.favoriteStations }\n\n        case STATION_SET:\n            const favoriteItems = new Set( state.favoriteStations )\n\n            favoriteItems.has( action.id ) ? favoriteItems.delete( action.id ) : favoriteItems.add( action.id )\n\n            return { isGet: true, isFetching: false, isError: false, stations: state.stations, favoriteStations: Array.from( favoriteItems ) }\n\n        case STATIONS_FAIL:\n            return { isGet: false, isFetching: false, isError: true, stations: [], favoriteStations: [] }\n\n        default:\n            return state\n    }\n}","import { combineReducers } from 'redux'\nimport network from './networkReducer'\nimport station from './stationsReducer'\n\nexport const rootReducer = combineReducers({\n    network,\n    station\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux'\nimport * as serviceWorker from './serviceWorker';\nimport configureStore from './store/configureStore'\n\nconst store = configureStore()\n\nReactDOM.render(\n    <Provider store={ store } >\n        <React.StrictMode>\n            <App/>\n        </React.StrictMode>\n    </Provider>,\n    document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n","import { createStore, applyMiddleware, compose } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport { createLogger } from 'redux-logger'\nimport { rootReducer } from './reducers/index'\n\nexport default function configureStore() {\n    const store = compose(\n        applyMiddleware( thunkMiddleware ),\n        applyMiddleware( createLogger() )\n    )( createStore )( rootReducer )\n\n    return store\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"App__nav_nav__3iv-O\",\"loader\":\"App__nav_loader__2l-29\",\"border\":\"App__nav_border__3VmIr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"station\":\"App__stationItem_station__2lKlt\",\"station__star\":\"App__stationItem_station__star__1ji4L\",\"station__star_active\":\"App__stationItem_station__star_active__166fv\"};"],"sourceRoot":""}